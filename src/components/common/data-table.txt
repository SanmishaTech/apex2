'use client';

import React from 'react';
import { cn } from '@/lib/utils';

export type SortOrder = 'asc' | 'desc';
export type SortState = {
	field: string;
	order: SortOrder;
};

export type Column<T> = {
	key: string; // unique column key maps to field for sorting
	header: string | React.ReactNode;
	accessor?: (row: T) => React.ReactNode; // if omitted, will attempt (row as any)[key]
	sortable?: boolean;
	className?: string; // header cell classes
	cellClassName?: string; // body cell classes
	hideHeaderLabel?: boolean; // still renders clickable area for icon
};

export type DataTableProps<T extends object> = {
	columns: Column<T>[];
	data: T[];
	loading?: boolean;
	emptyMessage?: string;
	sort?: SortState;
	onSortChange?: (next: SortState) => void;
	getRowKey?: (row: T, index: number) => string | number;
	renderRowActions?: (row: T) => React.ReactNode;
	actionsHeader?: React.ReactNode;
	className?: string;
	tableClassName?: string;
	scrollContainerClassName?: string; // customize the scroll wrapper div for responsive tweaks
	dense?: boolean;
	stickyHeader?: boolean;
	noStriping?: boolean;
	skeletonRows?: number;
	/** Make the first data column sticky on horizontal scroll */
	stickyFirstColumn?: boolean;
	/** Minimum table width (px) before horizontal scroll. Defaults to 900 */
	minTableWidth?: number; // Set default minTableWidth=900
};

export function DataTable<T extends object>({
	columns,
	data,
	loading,
	emptyMessage = 'No records found',
	sort,
	onSortChange,
	getRowKey,
	renderRowActions,
	actionsHeader = 'Actions',
	className,
	tableClassName,
	scrollContainerClassName,
	dense,
	stickyHeader,
	noStriping,
	skeletonRows = 8,
	stickyFirstColumn,
	minTableWidth, // no default so it can shrink to container width unless explicitly set
}: DataTableProps<T>) {
	const rowKey = (row: T, i: number) => {
		if (getRowKey) return getRowKey(row, i);
		if (Object.prototype.hasOwnProperty.call(row, 'id')) {
			const val = (row as Record<string, unknown>)['id'];
			if (typeof val === 'string' || typeof val === 'number') return val;
		}
		return i;
	};

	function toggleSort(col: Column<T>) {
		if (!onSortChange || !col.sortable) return;
		if (!sort || sort.field !== col.key) {
			onSortChange({ field: col.key, order: 'asc' });
		} else {
			onSortChange({
				field: col.key,
				order: sort.order === 'asc' ? 'desc' : 'asc',
			});
		}
	}

	return (
		<div
			className={cn(
				'relative rounded-lg border bg-background shadow-sm overflow-hidden',
				className
			)}
		>
			{/* Horizontal scroll only if content wider than container */}
			<div
				className={cn(
					'block w-full max-w-full overflow-x-auto supports-[overflow:clip]:[overflow:clip_visible]',
					scrollContainerClassName
				)}
				style={{
					WebkitOverflowScrolling: 'touch',
					msOverflowStyle: '-ms-autohiding-scrollbar',
				}}
			>
				<table
					className={cn('w-full border-separate border-spacing-0', tableClassName)}
					style={minTableWidth ? { minWidth: `${minTableWidth}px` } : undefined}
					aria-busy={loading ? 'true' : 'false'}
				>
					<thead
						className={cn(
							'bg-muted/40 backdrop-blur supports-[backdrop-filter]:bg-muted/30',
							stickyHeader && 'sticky top-0 z-10'
						)}
					>
						<tr className='text-left'>
							{columns.map((col, idx) => {
								const active = sort?.field === col.key;
								return (
									<th
										key={col.key}
										className={cn(
											'py-2.5 px-3 font-medium align-middle border-b border-border/70 first:rounded-tl-lg last:rounded-tr-lg text-[13px] tracking-wide',
											col.sortable && 'cursor-pointer select-none group',
											col.className,
											stickyFirstColumn &&
												idx === 0 &&
												'sticky left-0 z-20 bg-background border-r border-border/60'
										)}
										onClick={() => toggleSort(col)}
										aria-sort={
											active
												? sort?.order === 'asc'
													? 'ascending'
													: 'descending'
												: 'none'
										}
										scope='col'
									>
										<span
											className={cn(
												'inline-flex items-center gap-1',
												col.hideHeaderLabel && 'sr-only'
											)}
										>
											{col.header}
											{col.sortable && (
												<span
													className={cn(
														'text-[10px] text-muted-foreground transition-opacity',
														!active && 'opacity-0 group-hover:opacity-100'
													)}
												>
													{active ? (sort?.order === 'asc' ? '▲' : '▼') : '↕'}
												</span>
											)}
										</span>
									</th>
								);
							})}
							{renderRowActions && (
								<th
									className={cn(
										'py-2.5 px-3 font-medium align-middle border-b border-border/70 text-[13px] tracking-wide last:rounded-tr-lg whitespace-nowrap'
									)}
								>
									{actionsHeader}
								</th>
							)}
						</tr>
					</thead>
					<tbody>
						{loading &&
							Array.from({ length: skeletonRows }).map((_, rIdx) => (
								<tr
									key={`sk-${rIdx}`}
									className={cn(
										'border-t',
										!noStriping && rIdx % 2 === 1 && 'bg-muted/20'
									)}
								>
									{columns.map((col, cIdx) => (
										<td
											key={col.key + cIdx}
											className={cn(
												'py-2 px-3',
												dense && 'py-1',
												col.cellClassName
											)}
										>
											<div className='h-4 w-full max-w-[140px] bg-muted/60 rounded animate-pulse' />
										</td>
									))}
									{renderRowActions && (
										<td className={cn('py-2 px-3', dense && 'py-1')}>
											<div className='h-4 w-12 bg-muted/60 rounded animate-pulse' />
										</td>
									)}
								</tr>
							))}
						{!loading && data.length === 0 && (
							<tr>
								<td
									colSpan={columns.length + (renderRowActions ? 1 : 0)}
									className='py-8 text-center text-muted-foreground'
								>
									{emptyMessage}
								</td>
							</tr>
						)}
						{!loading &&
							data.map((row, i) => (
								<tr
									key={rowKey(row, i)}
									className={cn(
										'border-t transition-colors hover:bg-muted/40',
										!noStriping && i % 2 === 1 && 'bg-muted/20 dark:bg-muted/10'
									)}
								>
									{columns.map((col, cIdx) => {
										return (
											<td
												key={col.key}
												className={cn(
													'py-2 px-3 align-middle',
													dense && 'py-1',
													col.cellClassName,
													stickyFirstColumn &&
														cIdx === 0 &&
														'sticky left-0 z-10 bg-background border-r border-border/60'
												)}
											>
												{col.accessor
													? col.accessor(row)
													: ((row as unknown as Record<string, unknown>)[
															col.key
													  ] as React.ReactNode) ?? '—'}
											</td>
										);
									})}
									{renderRowActions && (
										<td className={cn('py-2 px-3 whitespace-nowrap', dense && 'py-1')}>
											{renderRowActions(row)}
										</td>
									)}
								</tr>
							))}
					</tbody>
				</table>
			</div>
		</div>
	);
}
